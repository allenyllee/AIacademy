# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
set.seed(123456)
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
library("corpcor")
n <- 6 # 20
p <- 10 # 100
set.seed(123456)
# generate random pxp covariance matrix
sigma <- matrix(rnorm(p * p), ncol = p)
sigma <- crossprod(sigma) + diag(rep(0.1, p)) #  t(x) %*% x + diag(rep(0.1, p))
# simulate multinormal data of sample size n
sigsvd <- svd(sigma)
y <- t(sigsvd$v %*% (t(sigsvd$u) * sqrt(sigsvd$d)))
x <- matrix(rnorm(n * ncol(sigma)), nrow = n) %*% y # problem here! use mvrnorm {MASS}
# estimate covariance matrix
s1 <- cov(x)
s2 <- cov.shrink(x)
par.orig <- par(mfrow=c(1,3))
image(t(sigma)[,p:1], main="true cov", xaxt="n", yaxt="n")
image(t(s1)[,p:1], main="empirical cov", xaxt="n", yaxt="n")
image(t(s2)[,p:1], main="shrinkage cov", xaxt="n", yaxt="n")
par(par.orig)
# squared error
sum((s1 - sigma) ^ 2)
sum((s2 - sigma) ^ 2)
# compare positive definiteness
is.positive.definite(sigma)
is.positive.definite(s1)
is.positive.definite(s2)
# compare ranks and condition
rank.condition(sigma)
rank.condition(s1)
rank.condition(s2)
# compare eigenvalues
e0 <- eigen(sigma, symmetric = TRUE)$values
e1 <- eigen(s1, symmetric = TRUE)$values
e2 <- eigen(s2, symmetric = TRUE)$values
matplot(data.frame(e0, e1, e2), type = "l", ylab="eigenvalues", lwd=2)
legend("top", legend=c("true", "empirical", "shrinkage"), lwd=2, lty=1:3, col=1:3)
data.frame(rank.condition(sigma,
rank.condition(s1),
rank.condition(s2))
)
data.frame(rank.condition(sigma),
rank.condition(s1),
rank.condition(s2))
rank.condition(sigma)
c(rank.condition(sigma))
data.frame(rank.condition(sigma))
data.frame(
data.frame(rank.condition(sigma)),
data.frame(rank.condition(s1)),
data.frame(rank.condition(s2)))
rbind(
data.frame(rank.condition(sigma)),
data.frame(rank.condition(s1)),
data.frame(rank.condition(s2)))
rc <- rbind(
data.frame(rank.condition(sigma)),
data.frame(rank.condition(s1)),
data.frame(rank.condition(s2)))
rownames(rc) <- c("true", "empirical", "shrinkage")
rc

# 7/32
id <- sample(2, nrow(iris), replace = TRUE, prob = c(0.9, 0.1))
id
# 10/32
install.packages("bootstrap")
library(bootstrap)
jackknife
# 11/32
set.seed(12345)
x <- runif(30)
n <- length(x)
theta <- CV(x)
# 10/32
install.packages("bootstrap")
install.packages("bootstrap")
# 10/32
install.packages("bootstrap")
library(bootstrap)
# 10/32
install.packages("bootstrap")
library(bootstrap)
jackknife
# 11/32
set.seed(12345)
x <- runif(30)
n <- length(x)
CV <- function(x) sqrt(var(x))/mean(x)
theta <- CV(x)
theta.i <- sapply(1:n, function(i) CV(x[-i]))
theta.i
runif
?runif
theta.i
theta.jack <- n*theta - (n-1)*mean(theta.i)
theta.jack <- n*theta - (n-1)*mean(theta.i)
theta.jack
theta.jack <- n*theta - (n-1)*mean(theta.i)
theta.jack
plot(theta.i)
# 12/32
library(bootstrap)
set.seed(12345)
n <- 50; p <- 5
mydata <- as.data.frame(matrix(rnorm(n*p), ncol=p))
?rnorm
mydata <- as.data.frame(matrix(rnorm(n*p), ncol=p))
head(mydata, 3)
plot(mydata)
plot(mydata,1)
mydata
# 21/32
# 10-fold CV adaboost.M1
Vehicle.boost.cv <- boosting.cv(Class ~., data = Vehicle, v = 10, mfinal = 5,
control = rpart.control(maxdepth=maxdepth))
# 16/32
library(bootstrap)
# 21/32
# 10-fold CV adaboost.M1
Vehicle.boost.cv <- boosting.cv(Class ~., data = Vehicle, v = 10, mfinal = 5,
control = rpart.control(maxdepth=maxdepth))
# 20/32
library(adabag)
Vehicle.adaboost <- boosting(Class ~., data = Vehicle.train, mfinal = mfinal,
+                              control = rpart.control(maxdepth=maxdepth))
Vehicle.adaboost.pred <- predict.boosting(Vehicle.adaboost, newdata = Vehicle.test)
Vehicle.adaboost.pred$confusion
Vehicle.adaboost.pred$error
# 16/32
library(bootstrap)
set.seed(12345)
x <- rnorm(20)
mean(x)
x.bootstrap.mean <- bootstrap(x, 100, theta=mean)
x.bootstrap.mean
mean(x.bootstrap.mean$thetastar)
mu.hat <- mean(x)
n <- length(x)
ja <- jackknife(x, mean)
mu.hat.jack <- n*mu.hat - (n-1)*mean(ja$jack.values)
mu.hat.jack <- mu.hat - ja$jack.bias
# 19/32
library(rpart); library(mlbench); library(adabag)
# 27/32
library(unbalanced)
# 19/32
install.packages("mlbench")
# 27/32
library(unbalanced)
# 27/32
install.packages("unbalanced")
# 27/32
install.packages("unbalanced")
library(unbalanced)
p <- ncol(ubIonosphere)
y <- ubIonosphere$Class
x <- ubIonosphere[ ,-p]
library(unbalanced)
p <- ncol(ubIonosphere)
# 27/32
install.packages("mlbench")
install.packages("unbalanced")
install.packages("unbalanced")
library(mlbench)
library(unbalanced)
p <- ncol(ubIonosphere)
library(mlbench)
library(unbalanced)
p <- ncol(ubIonosphere)
p <- ncol(data(ubIonosphere))
y <- ubIonosphere$Class
x <- ubIonosphere[ ,-p]
data(ubIonosphere)
dim(ubIonosphere)
head(ubIonosphere)
table(ubIonosphere$Class)
p <- ncol(data(ubIonosphere))
y <- ubIonosphere$Class
x <- ubIonosphere[ ,-p]
y <- ubIonosphere$Class
x <- ubIonosphere[ ,-p]
x <- ubIonosphere[ ,p]
data <- ubBalance(X=x, Y=y, type="ubOver", k=0)
overData <- data.frame(data$X, Class=data$Y)
table(overData$Class)
data <- ubBalance(X=x, Y=y, type="ubUnder", perc=50, method="percPos")
underData <- data.frame(data$X, Class=data$Y)
table(underData$Class)
bdata <- ubBalance(X= x, Y=y, type="ubSMOTE", percOver=300, percUnder=150, verbose=TRUE)
str(bdata)
table(bdata$Y)
table
table(overData$Class)
overData
data <- ubBalance(X=x, Y=y, type="ubOver", k=0)
overData <- data.frame(data$X, Class=data$Y)
table(overData$Class)
table(overData$Class)
data <- ubBalance(X=x, Y=y, type="ubUnder", perc=50, method="percPos")
underData <- data.frame(data$X, Class=data$Y)
table(underData$Class)
bdata <- ubBalance(X= x, Y=y, type="ubSMOTE", percOver=300, percUnder=150, verbose=TRUE)
p <- ncol(data(ubIonosphere))
y <- ubIonosphere$Class
x <- ubIonosphere[ ,p]
data <- ubBalance(X=x, Y=y, type="ubOver", k=0)
overData <- data.frame(data$X, Class=data$Y)
table(overData$Class)
data <- ubBalance(X=x, Y=y, type="ubUnder", perc=50, method="percPos")
underData <- data.frame(data$X, Class=data$Y)
table(underData$Class)
bdata <- ubBalance(X= x, Y=y, type="ubSMOTE", percOver=300, percUnder=150, verbose=TRUE)
p
x
y
ubIonosphere
data(ubIonosphere)
data(ubIonosphere)
x
bdata <- ubBalance(X=x, Y=y, type="ubSMOTE", percOver=300, percUnder=150, verbose=TRUE)
bdata <- ubBalance(X=x, Y=y, type="ubSMOTE", percOver=300, percUnder=150, verbose=TRUE)
?ubBalance
p <- ncol(ubIonosphere)
data(ubIonosphere)
p <- ncol(ubIonosphere)
y <- ubIonosphere$Class
x <- ubIonosphere[ ,p]
data(ubIonosphere)
x
data <- ubBalance(X=x, Y=y, type="ubOver", k=0)
overData <- data.frame(data$X, Class=data$Y)
table(overData$Class)
data <- ubBalance(X=x, Y=y, type="ubUnder", perc=50, method="percPos")
underData <- data.frame(data$X, Class=data$Y)
table(underData$Class)
x <- ubIonosphere[ ,-p]
data(ubIonosphere)
x
data <- ubBalance(X=x, Y=y, type="ubOver", k=0)
overData <- data.frame(data$X, Class=data$Y)
table(overData$Class)
data <- ubBalance(X=x, Y=y, type="ubUnder", perc=50, method="percPos")
underData <- data.frame(data$X, Class=data$Y)
table(underData$Class)
bdata <- ubBalance(X=x, Y=y, type="ubSMOTE", percOver=300, percUnder=150, verbose=TRUE)
str(bdata)
table(bdata$Y)
table(bdata$Y)
data(ubIonosphere)
dim(ubIonosphere)
head(ubIonosphere)
table(ubIonosphere$Class)
# 28/32
set.seed(12345)
n <- nrow(ubIonosphere) # 351
no.train <- floor(0.5*n) # 175
id <- sample(1:n, no.train)
x.train  <- x[id, ]  # 175 x 32
y.train <- y[id]
x.test <- x[-id, ] # 176  32
y.test <- y[-id]
x
x <- ubIonosphere[ ,-p]
data <- ubBalance(X=x, Y=y, type="ubOver", k=0)
x
p
x
dim(ubIonosphere)
x <- ubIonosphere[ ,]
x
x <- ubIonosphere[ ,1]
x
x <- ubIonosphere[ ,2]
x
x <- ubIonosphere[ ,3]
x
x <- ubIonosphere[ ,4]
x
x <- ubIonosphere[ ,5]
x
x <- ubIonosphere[ ,-5]
x
x <- ubIonosphere[1,2]
x
x <- ubIonosphere[1,]
x
x <- ubIonosphere[1,-p]
x
x <- ubIonosphere[1,-32]
x
x <- ubIonosphere[1,-31:-32]
x
x <- ubIonosphere[1,-31:-33]
x

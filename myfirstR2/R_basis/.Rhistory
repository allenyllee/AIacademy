linessplit[1,]
linessplit
cbind(lines3,c(unlist(tmp[sel], use.names=FALSE)))
# define split_n_bind
library(reshape2)
split_n_bind <- function(x, p="\\|",n=c(1:2), sel=c(1)){
lines3 <- character(0)
tmp <- colsplit(x, pattern=p, names=n)
cbind(lines3,c(unlist(tmp[sel], use.names=FALSE)))
}
test <- split_n_bind(t(linessplit))
test
test <- split_n_bind((linessplit))
test
test <- split_n_bind(t(linessplit))
test
rbind(lines3,c(unlist(tmp[sel], use.names=FALSE)))
test <- split_n_bind(t(linessplit))
test
split_n_bind <- function(x, p="\\|",n=c(1:2), sel=c(1)){
lines3 <- character(0)
tmp <- colsplit(x, pattern=p, names=n)
rbind(lines3,c(unlist(tmp[sel], use.names=FALSE)))
}
test <- split_n_bind(t(linessplit))
test
temp2 <- t(linessplit)
temp2
linessplit
temp2 <- t(linessplit)
temp2
test <- split_n_bind(temp2)
test
temp3 <- colsplit(temp2, pattern="\\|", names=n=c(1:2))
temp3
temp3 <- colsplit(temp2, pattern="\\|", names=c(1:2))
temp3
temp2 <- t(linessplit)
temp2
temp3 <- colsplit(temp2, pattern="\\|", names=c(1:2))
temp3
temp3[1]
# second use sapply split_n_bind with pattern "\\|" to split linessplit into 2 columes named 1,2, so that generate 2 other rows that contains separated datas.
# then select first separated data, that is the row 1:2 (on the other hand, the second separated data is the row 3:4)
linessplit <- sapply(linessplit, split_n_bind)
linessplit
linessplit
# first use colsplit with pattern "\t" to split lines into 4 columes named 1,2,3,4
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
linessplit
linessplit
linessplit[1,]
test <- split_n_bind(linessplit[1,])
test
# second use sapply split_n_bind with pattern "\\|" to split linessplit into 2 columes named 1,2, so that generate 2 other rows that contains separated datas.
# then select first separated data, that is the row 1:2 (on the other hand, the second separated data is the row 3:4)
linessplit <- sapply(linessplit, split_n_bind)
linessplit
test
linessplit[1,]
linessplit
# first use colsplit with pattern "\t" to split lines into 4 columes named 1,2,3,4
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
str(linessplit)
nrow(linessplit)
linessplit
linessplit[1,]
test <- split_n_bind(linessplit[1,])
test
linessplit[1,]
temp3 <- colsplit(linessplit[1,], pattern="\\|", names=c(1:2))
temp3
temp3 <- rowsplit(linessplit[1,], pattern="\\|", names=c(1:2))
temp3 <- colsplit(linessplit[1,], pattern="\\|", names=c(1:2))
temp3
temp3 <- t(colsplit(linessplit[1,], pattern="\\|", names=c(1:2)))
temp3
temp3[1]
temp3[,1]
temp3[1,]
linessplit[1,]
temp3 <- t(colsplit(linessplit[1,], pattern="\\|", names=c(1:2)))
temp3[1,]
testfunc <- function(x){
t(colsplit(x, pattern="\\|", names=c(1:2)))[1,]
}
testfunc <- function(x){
t(colsplit(x, pattern="\\|", names=c(1:2)))[1,]
}
testfunc <- function(x){
return t(colsplit(x, pattern="\\|", names=c(1:2)))[1,]
}
testfunc <- function(x){
temp33 <- t(colsplit(x, pattern="\\|", names=c(1:2)))[1,]
}
temp33 <- t(colsplit(x, pattern="\\|", names=c(1:2)))
temp33[1,]
testfunc <- function(x){
temp33 <- t(colsplit(x, pattern="\\|", names=c(1:2)))
temp33[1,]
}
temp4 <- sapply(linessplit, testfunc )
temp4
testfunc <- function(x){
temp33 <- t(colsplit(x, pattern="\\|", names=c(1:2)))
temp33[1,]
}
linessplit
temp4 <- sapply(linessplit, testfunc )
temp4
# ================================
# origin data
lines <- c("A|1\tB|2\t0.5\t0.4", "C|3\tD|4\t0.9\t1", "E|5\tF|6\t0.7\t0.2")
lines[1]
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
linessplit
# ================================
# origin data
lines <- c("A|1\tB|2\t0.5\t0.4", "C|3\tD|4\t0.9\t1", "E|5\tF|6\t0.7\t0.2")
lines
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
linessplit
testfunc <- function(x){
temp33 <- t(colsplit(x, pattern="\\|", names=c(1:2)))
temp33[1,]
}
temp4 <- sapply(linessplit, testfunc )
temp4
testfunc <- function(x){
temp33 <- t(colsplit(x, pattern="\\|", names=c(1:2)))
temp33[2,]
}
temp4 <- sapply(linessplit, testfunc )
temp4
testfunc <- function(x){
temp33 <- t(colsplit(x, pattern="\\|", names=c(1:2)))
temp33[1,]
}
temp4 <- sapply(linessplit, testfunc )
temp4
linessplit
temp4
# ================================
# origin data
lines <- c("A|1\tB|2\t0.5\t0.4", "C|3\tD|4\t0.9\t1", "E|5\tF|6\t0.7\t0.2")
lines
library(reshape2)
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
linessplit
split_n_remove <- function(x){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[1,]
}
split_n_remove
split_n_remove <- function(x){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[1,]
}
temp4 <- sapply(linessplit, split_n_remove )
temp4
# ================================
# origin data
lines <- c("A|1\tB|2\t0.5\t0.4", "C|3\tD|4\t0.9\t1", "E|5\tF|6\t0.7\t0.2")
lines
library(reshape2)
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
linessplit
split_n_remove <- function(x){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[1,]
}
temp4 <- sapply(linessplit, split_n_remove )
temp4
split_n_select <- function(x){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[1,]
}
temp4 <- sapply(linessplit, split_n_select )
temp4
# ================================
# origin data
lines <- c("A|1\tB|2\t0.5\t0.4", "C|3\tD|4\t0.9\t1", "E|5\tF|6\t0.7\t0.2")
lines
library(reshape2)
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
linessplit
split_n_select <- function(x){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[1,]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
# ================================
# origin data
lines <- c("A|1\tB|2\t0.5\t0.4", "C|3\tD|4\t0.9\t1", "E|5\tF|6\t0.7\t0.2")
lines
library(reshape2)
linessplit <- colsplit(lines, pattern="\t", names=c(1,2,3,4))
linessplit
split_n_select <- function(x, sel=c(1,)){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel]
}
temp4 <- sapply(linessplit, split_n_select)
split_n_select <- function(x, sel=(1,)){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=(1,)){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel="1,"){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel='1,'){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=[1,]){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=c(1)){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel,]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=c(1)){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=c(1)){
tmp <- t(colsplit(x, pattern="\\|", names=c(1:2)))
tmp[sel,]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=c(1), pat="\\|", nam=c(1:2)){
tmp <- t(colsplit(x, pattern=pat, names=nam))
tmp[sel,]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=c(2), pat="\\|", nam=c(1:2)){
tmp <- t(colsplit(x, pattern=pat, names=nam))
tmp[sel,]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
split_n_select <- function(x, sel=c(1), pat="\\|", nam=c(1:2)){
tmp <- t(colsplit(x, pattern=pat, names=nam))
tmp[sel,]
}
temp4 <- sapply(linessplit, split_n_select)
temp4
a <- list(b=1)
class(a) <- "myclass"
myfunction <- function(x,...) UseMethod("myfunction")
myfunction.myclass <- function(x,...) x$b+1
myfunction(a)
class(a)
?UseMethod()
a$b
a <- list(b=1)
class(a) <- "myclass"
class(a)
?class()
class(a)
a <- list(b=1)
class(a)
class(a) <- "myclass" #
class(a)
a <- list(b=1)
class(a) # 原本的class 是list
class(a) <- "myclass" #
a <- list(b=1)
class(a) # 原本的class 是list
class(a) <- "myclass" # 自訂一個 class 為 myclass
class(a) # 新的class 為 myclass
?class()
?UseMethod()
UseMethod("myfunction")
UseMethod("fun")
fun <- UseMethod("fun")
fun <- function(x,...) UseMethod("fun")
fun
myfun <- function(x,...) UseMethod("fun")
myfun
myfun.myclass <- function(x,...) x$b+1
myfun.myclass(a)
myfun(a)
fun(a)
myfun
myfun2.myclass <- function(x,...) x$b+1
myfun2.myclass(a)
fun(a)
myfun2(a)
myfun2 <- function(x,...) UseMethod("myfun2")
myfun2(a)
myfun2 <- function(x,...) UseMethod("myfun")
myfun2(a)
myfun2 <- function(x,...) UseMethod("myfun")
myfun2.myclass <- function(x,...) x$b+1
myfun2.myclass(a)
myfun2(a)
myfun2 <- function(x,...) UseMethod("fun")
myfun2.myclass <- function(x,...) x$b+1
myfun2.myclass(a)
myfun2(a)
# 定義一個 myfunciton 方法
tmp <- function(x,...) UseMethod("myfunction")
#
tmp <- function(x,...) x$b+1
myfunction(a)
#
tmp.myclass <- function(x,...) x$b+1
myfunction(a)
#
tmp.myclass <- function(x,...) x$b+2
myfunction(a)
tmp(a)
# 定義一個 myfunciton 方法
tmp <- function(x,...) UseMethod("myfunction")
#
tmp.myclass <- function(x,...) x$b+2
tmp(a)
# 定義一個 myfunciton 方法
tmp <- function(x,...) UseMethod("tmp")
#
tmp.myclass <- function(x,...) x$b+2
tmp(a)
# 定義一個 myfunciton 方法
tmp2 <- function(x,...) UseMethod("tmp")
#
tmp.myclass <- function(x,...) x$b+2
tmp(a)
# 定義一個 myfunciton 方法
tmp2 <- function(x,...) UseMethod("tmp")
#
tmp.myclass <- function(x,...) x$b+3
tmp(a)
# 定義一個 myfunciton 方法
function(x,...) UseMethod("tmp")
#
tmp.myclass <- function(x,...) x$b+3
tmp(a)
# 定義一個 myfunciton 方法
function(x,...) UseMethod("tmp")
#
tmp.myclass <- function(x,...) x$b+4
tmp(a)
# 宣告一個 myfunciton 方法
function(x,...) UseMethod("myfunciton")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+4
myfunciton(a)
# 宣告一個 myfunciton 方法
function(x,...) UseMethod("myfunciton")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+4
myfunciton(a)
# 宣告一個 myfunciton 方法
function(x,...) UseMethod("myfunciton")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+4
myfunciton(a)
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("myfunciton")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+4
myfunciton(a)
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+4
myfunciton(a)
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+4
myfunciton(a)
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+5
myfunciton(a)
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+5
myfunciton(a)
tmp(a)
rm(list = ls())
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+5
myfunciton(a)
tmp(a)
a <- list(b=1)
class(a) # 原本的class 是list
class(a) <- "myclass" # 自訂一個 class 為 myclass
class(a) # 新的class 為 myclass
?class()
?UseMethod()
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
myfunciton.myclass <- function(x,...) x$b+5
myfunciton(a)
tmp(a)
# 宣告一個 myfunciton 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義當myfunciton 方法套用到 myclass 物件時的動作
tmp.myclass <- function(x,...) x$b+5
myfunciton(a)
tmp(a)
a <- list(b=1)
class(a) # 原本的class 是list
class(a) <- "myclass" # 自訂一個 class 為 myclass
class(a) # 新的class 為 myclass
?class()
?UseMethod()
# 宣告一個函數 myfunciton 使用 tmp 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義tmp 方法套用到 myclass 物件時的動作
tmp.myclass <- function(x,...) x$b+5
# 將函數myfunciton 套用在 myclass 物件a 上
myfunciton(a)
rm(list = ls())
a <- list(b=1)
class(a) # 原本的class 是list
class(a) <- "myclass" # 自訂一個 class 為 myclass
class(a) # 新的class 為 myclass
?class()
?UseMethod()
# 宣告一個函數 myfunciton 使用 tmp 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義tmp 方法套用到 myclass 物件時的動作
tmp.myclass <- function(x,...) x$b+5
# 將函數myfunciton 套用在 myclass 物件a 上
myfunciton(a)
rm(list = ls())
a <- list(b=1)
class(a) # 原本的class 是list
class(a) <- "myclass" # 自訂一個 class 為 myclass
class(a) # 新的class 為 myclass
?class()
?UseMethod()
# 宣告一個函數 myfunciton 使用 tmp 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義tmp 方法套用到 myclass 物件時的動作
tmp.myclass <- function(x,...) x$b+5
# 將函數myfunciton (使用tmp方法) 套用在物件a (屬於myclass)
myfunciton(a)
a <- list(b=1)
class(a) # 物件a 的類別原本是 list
class(a) <- "myclass" # 指定物件a 的類別為 myclass
class(a) # 新的類別為 myclass
?class()
?UseMethod()
# 宣告一個函數 myfunciton 使用 tmp 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 宣告一個函數 myfunciton 使用 tmp 方法
myfunciton <- function(x,...) UseMethod("tmp")
# 定義tmp 方法套用到 myclass 類別的物件時的動作
tmp.myclass <- function(x,...) x$b+5
# 將函數myfunciton (使用tmp方法) 套用在物件a (屬於myclass)
myfunciton(a)
rm(list = ls())
# ====================
plot( mpg ~ cyl, data= mtcars )
plot( cyl ~ mpg, data= mtcars )
# The left hand is the dependent variable, the right hand is
# the independent variable. Much like y = bx + c means that y ~ x.
plot( mpg ~ cyl, data= mtcars )
# The left hand is the dependent variable, the right hand is
# the independent variable. Much like y = bx + c means that y ~ x.
plot( mpg ~ cyl, data= mtcars ) # mpg (y) 對 cyl (x) 作圖
plot( cyl ~ mpg, data= mtcars ) # cyl (y) 對 mpg (x) 作圖
plot( cyl ~ ., data= mtcars ) # cyl (y) 對 mpg (x) 作圖
plot( cyl ~ ., data= mtcars ) # cyl (y) 對 mpg (x) 作圖
mtcars
plot( cyl ~ ., data= mtcars ) # cyl (y) 對 mpg (x) 作圖
plot( cyl ~ mpg, data= mtcars ) # cyl (y) 對 mpg (x) 作圖
plot( cyl ~ ., data= mtcars ) # cyl (y) 對 除了cyl以外的欄位 (x) 作圖(分開畫)
mtcars
plot( cyl ~ ., data= mtcars ) # cyl (y) 對 除了cyl以外的欄位 (x) 作圖(分開畫)
plot( ~ ., data= mtcars ) # cyl (y) 對 除了cyl以外的欄位 (x) 作圖(分開畫)
plot( ~ ., data= mtcars ) # cyl (y) 對 除了cyl以外的欄位 (x) 作圖(分開畫)
plot( ~ , data= mtcars ) # cyl (y) 對 除了cyl以外的欄位 (x) 作圖(分開畫)
plot( ~ ., data= mtcars ) # cyl (y) 對 除了cyl以外的欄位 (x) 作圖(分開畫)
mtcars
lm(mpg ~ cyl, data= mtcars)
?lm
lm( ~ ., data= mtcars)
lm( mpg ~ ., data= mtcars)
